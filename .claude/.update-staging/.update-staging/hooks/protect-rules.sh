#!/bin/sh
# Claude Code Flow - Robust File Protection Hook (v0.1 - Security Hardened)
# Event: PreToolUse
# Purpose: Prevents the AI from modifying critical project configuration files.

# --- Source Dependencies ---
# Load helper functions and the user configuration.
. "$(dirname "$0")/detect-tools.sh"
if [ -f ".clauderc" ]; then
    . ./.clauderc
fi

# --- Main Logic ---
main() {
    # If this feature is disabled by the user in .clauderc, exit immediately.
    if [ "${CCF_PROTECT_RULES_ENABLED:-true}" != "true" ]; then
        exit 0
    fi

    local hook_data
    hook_data=$(cat)

    # Safely extract the file path.
    local file_path
    file_path=$(printf '%s' "$hook_data" | ccf_json_extract ".tool_input.file_path")
    [ -z "$file_path" ] && exit 0

    # --- Security Guard: Path Traversal Check ---
    # Prevents access outside the project root.
    case "$file_path" in
        ../*|/*)
            reason="SECURITY_GATE: Action blocked. Path traversal outside the project directory ('../' or '/') is strictly forbidden."
            printf '{"decision":"block","reason":"%s"}\n' "$(ccf_json_escape "$reason")"
            exit 0
            ;;
    esac

    # --- Protection Logic ---
    # Define which files are protected and why.
    local protected_reason=""
    case "$file_path" in
        # Secret or credential files
        .env*|*.key|*.pem|*.p12|secrets.*|credentials.*)
            protected_reason="This file may contain secrets and must not be modified by the AI."
            ;;
        # AI's own context/cache
        .prompt-cache/*|.claude/workspace/history/*)
            protected_reason="Modifying the AI's own context or cache files is prohibited to maintain session integrity."
            ;;
        # Core strategic documents
        "GOAL.md"|"AIM.md"|"MISSION.md")
            protected_reason="This file contains the strategic project goals and is managed by the human developer. To add notes or ideas, please edit '.claude/NOTEBOOK.md'."
            ;;
        "CLAUDE.md")
            protected_reason="This file is the project's constitution, typically generated by the official /init command. It should only be modified by humans to maintain project integrity."
            ;;
        ".gitignore"|"package.json"|"pyproject.toml"|"Cargo.toml"|".clauderc")
            protected_reason="This is a critical project configuration file. Changes must be explicitly requested and reviewed by the human developer to prevent breaking the development environment."
            ;;
        ".claude/settings.json"|".claude/settings.local.json")
            protected_reason="This is a core workflow settings file. It should only be modified manually or via the /config command to prevent system instability."
            ;;
    esac

    # If the file is protected, block the action and provide a clear, helpful reason to the AI.
    if [ -n "$protected_reason" ]; then
        local reason
        reason=$(printf "SAFETY_GATE: Action blocked. The file '%s' is protected.\n\nReason: %s" \
            "$file_path" "$protected_reason")
        
        # Use the JSON output mechanism to safely block the tool and feedback the reason.
        printf '{"decision":"block","reason":"%s"}\n' "$(ccf_json_escape "$reason")"
        exit 0
    fi
}

main
exit 0