#!/usr/bin/env bash
# cc-note.sh - Generate session hand-off note template
# ---------------------------------------------
# Usage:  cc-hooks/cc-note.sh [--yes]
#   --yes   : non-interactive; overwrite existing file if any
#
# This script creates a Markdown hand-off note under
#   ./.ccflow/NOTE/YYYY-MM-DD-HHMM-handoff.md
# with a pre-formatted template.  It is safe to rerun; if the target file
# already exists it opens the file in $EDITOR unless --yes is given.
# ---------------------------------------------
set -euo pipefail

YES_MODE=false
FULL_MODE=false
for arg in "$@"; do
  case "$arg" in
    --yes) YES_MODE=true ;;
    --full) FULL_MODE=true ;;
  esac
  shift || true
done

# --------------------------------------------------
# Load project configuration (YAML) if present
# --------------------------------------------------
CCFLOW_DIR=".ccflow"
CONFIG_FILE="$CCFLOW_DIR/config"
YQ_BIN="$(command -v yq || true)"
DEFAULT_MODE="summary"
TEMPLATE_PATH=""
INCLUDE_SECTIONS=()
EXTRA_SECTIONS=()
OWNERS=()
CI_BADGE=""

if [[ -f "$CONFIG_FILE" ]]; then
  echo "[cc-note] Using config $CONFIG_FILE" >&2
  if [[ -n "$YQ_BIN" ]]; then
    DEFAULT_MODE="$($YQ_BIN e '.note.default_mode // "summary"' "$CONFIG_FILE" 2>/dev/null)"
    TEMPLATE_PATH="$($YQ_BIN e '.note.template // ""' "$CONFIG_FILE" 2>/dev/null)"
    mapfile -t INCLUDE_SECTIONS < <($YQ_BIN e '.note.include_readme_sections[]' "$CONFIG_FILE" 2>/dev/null || true)
    mapfile -t EXTRA_SECTIONS < <($YQ_BIN e '.note.extra_sections[]' "$CONFIG_FILE" 2>/dev/null || true)
    mapfile -t OWNERS < <($YQ_BIN e '.project.owners[]' "$CONFIG_FILE" 2>/dev/null || true)
    CI_BADGE="$($YQ_BIN e '.ci.badge_url // ""' "$CONFIG_FILE" 2>/dev/null)"
  else
    # minimal parser: key: value at root level
    while IFS=: read -r key val; do
      key=$(echo "$key" | xargs)
      val=$(echo "$val" | xargs)
      case "$key" in
        default_mode) DEFAULT_MODE="$val" ;;
      esac
    done < <(grep -E 'default_mode:' "$CONFIG_FILE" || true)
  fi
fi

if [[ $FULL_MODE == false && $DEFAULT_MODE == "full" ]]; then
  FULL_MODE=true
fi

# Determine timestamp (local time)
TS=$(date +"%Y-%m-%d-%H%M")
NOTE_DIR=".ccflow/NOTE"
FILE="${NOTE_DIR}/${TS}-handoff.md"

mkdir -p "$NOTE_DIR"

if [[ -f "$FILE" && $YES_MODE == false ]]; then
  echo "[cc-note] $FILE already exists. Open in \$EDITOR? [y/N]" >&2
  read -r ans
  [[ "$ans" =~ ^[Yy]$ ]] || { echo "Aborted."; exit 1; }
fi

cat > "$FILE" <<EOF
# セッション情報共有 - ${TS}

## 🎯 セッション概要
- **開始時刻**: <!-- 例: 2025-07-21 09:00 -->
- **終了時刻**: <!-- 例: 2025-07-21 17:30 -->
- **環境**: <!-- bash 5.1, git 2.40 など -->
- **作業時間**: <!-- 例: 6時間30分 -->

## ✅ 完了した作業
### [L] 低複雑度タスク
- 
### [M] 中複雑度タスク
- 
### [H] 高複雑度タスク
- 

## 🔄 進行中の作業
### 現在の状況
- 
### 技術的決定事項
- 
### 発見された課題
- 

## 📋 次回セッションへの引き継ぎ
1. 
2. 

## 🧠 推奨次回アクション
- 

## 📊 パフォーマンス・メトリクス
- 

## 🗺 プロジェクト現在地
- **マイルストーン**: <!-- 例: v1.0 Alpha -->
- **期日**: <!-- 例: 2025-07-31 -->

## 🔀 作業ブランチ & 直近コミット
- **Branch**: $(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "(unknown)")
- **Commit**:  $(git log -1 --pretty="%h %s" 2>/dev/null || echo "(unknown)")

## ⭕ 未完了タスク一覧
- [ ] <!-- 優先度: 誰が何を、見積 -->

## 🗂 プロジェクト概要
$(if [[ $FULL_MODE == true ]]; then
  # 抜粋: README の「背景と目的」セクション (見出し## 背景と目的 から次の --- まで)
  awk '/^## 背景と目的/{flag=1;next}/^---/{flag=0}flag' README.md | sed 's/^/- /'
fi)

## 📂 重要ディレクトリ・ファイル
$(if [[ $FULL_MODE == true ]]; then
  awk '/^## ディレクトリ構成/{flag=1;next}/^---/{flag=0}flag' README.md
fi)

## 🚀 クイックスタート
$(if [[ $FULL_MODE == true ]]; then
  awk '/^## 🚀 クイックスタート/{flag=1;next}/^##/{if(flag && NR>1)exit}flag' README.md
fi)

## ➕ 追加情報
$(for sec in "${EXTRA_SECTIONS[@]}"; do
  case "$sec" in
    ci_status)
      if [[ -n "$CI_BADGE" ]]; then
        echo "### CI Status"
        echo "![CI Status]($CI_BADGE)"
        echo
      fi
      ;;
    contacts)
      if [[ ${#OWNERS[@]} -gt 0 ]]; then
        echo "### Contacts"
        for o in "${OWNERS[@]}"; do echo "- $o"; done
        echo
      fi
      ;;
    *)
      # treat as file path if exists
      if [[ -f "$sec" ]]; then
        echo "### $(basename "$sec")"
        cat "$sec"
        echo
      fi
      ;;
  esac
done)

---
*Generated by cc-note.sh (${FULL_MODE:+full})*
EOF

printf "[cc-note] Created %s\n" "$FILE"
